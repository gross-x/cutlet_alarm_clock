# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Cutlet.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def __init__(self):
        self.counter = 10.00  # Счетчик
        self.timer_run = False
        self.timer_on_of = False  # Есть ли данные в поле надписи

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(300, 318)
        MainWindow.setMinimumSize(QtCore.QSize(300, 318))
        MainWindow.setMaximumSize(QtCore.QSize(300, 318))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("background-color: rgb(11, 170, 255);\n"
"\n"
"")
        MainWindow.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_remind = QtWidgets.QLabel(self.centralwidget)
        self.label_remind.setGeometry(QtCore.QRect(0, 5, 300, 60))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_remind.setFont(font)
        self.label_remind.setStyleSheet("background-color: rgb(65, 57, 224);\n"
"color: rgb(255, 255, 255);")
        self.label_remind.setObjectName("label_remind")
        self.btn_start = QtWidgets.QPushButton(self.centralwidget)
        self.btn_start.setGeometry(QtCore.QRect(0, 70, 150, 110))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.btn_start.setFont(font)
        self.btn_start.setStyleSheet("background-color: rgb(65, 57, 224);\n"
"color: rgb(255, 255, 0);\n"
"")
        self.btn_start.setObjectName("btn_start")
        self.btn_plus = QtWidgets.QPushButton(self.centralwidget)
        self.btn_plus.setGeometry(QtCore.QRect(150, 70, 151, 55))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.btn_plus.setFont(font)
        self.btn_plus.setStyleSheet("background-color: rgb(65, 57, 224);\n"
"color: rgb(255, 255, 255);")
        self.btn_plus.setObjectName("btn_plus")
        self.btn_minus = QtWidgets.QPushButton(self.centralwidget)
        self.btn_minus.setGeometry(QtCore.QRect(150, 125, 151, 55))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.btn_minus.setFont(font)
        self.btn_minus.setStyleSheet("background-color: rgb(65, 57, 224);\n"
"color: rgb(255, 255, 255);")
        self.btn_minus.setObjectName("btn_minus")
        self.btn_stop = QtWidgets.QPushButton(self.centralwidget)
        self.btn_stop.setGeometry(QtCore.QRect(0, 183, 150, 110))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.btn_stop.setFont(font)
        self.btn_stop.setStyleSheet("background-color: rgb(65, 57, 224);\n"
"color: rgb(219, 189, 42);")
        self.btn_stop.setObjectName("btn_stop")
        self.btn_plus_ten = QtWidgets.QPushButton(self.centralwidget)
        self.btn_plus_ten.setGeometry(QtCore.QRect(150, 183, 150, 55))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.btn_plus_ten.setFont(font)
        self.btn_plus_ten.setStyleSheet("background-color: rgb(65, 57, 224);\n"
"color: rgb(255, 255, 255);")
        self.btn_plus_ten.setObjectName("btn_plus_ten")
        self.btn_minus_ten = QtWidgets.QPushButton(self.centralwidget)
        self.btn_minus_ten.setGeometry(QtCore.QRect(150, 238, 150, 55))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.btn_minus_ten.setFont(font)
        self.btn_minus_ten.setStyleSheet("background-color: rgb(65, 57, 224);\n"
"color: rgb(255, 255, 255);")
        self.btn_minus_ten.setObjectName("btn_minus_ten")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    #**********Добавляем функционал классу********#

        self.click_button()  # При нажатии на кнопку


    def click_button(self):  # Слушаем нажатие на кнопки
        # self.btn_start.clicked.connect(lambda: self.write_number(self.btn_start.text()))  # При нажатии передать текст кнопки
        self.btn_start.clicked.connect(lambda: self.push_button("start_ten_min"))
        self.btn_plus.clicked.connect(lambda: self.push_button("plus_min"))
        self.btn_minus.clicked.connect(lambda: self.push_button("minus_min"))
        self.btn_plus_ten.clicked.connect(lambda: self.push_button("plus_ten_min"))
        self.btn_minus_ten.clicked.connect(lambda: self.push_button("minus_ten_min"))
        self.btn_stop.clicked.connect(lambda: self.push_button("stop"))

    def push_button(self, txt_button):
        print('push button')
        print(self.timer_on_of)
        if self.timer_on_of == False:  # При первом запуске
            self.default_push_button(txt_button)
            self.timer_on_of = True
        else:
            #self.edit_timer(txt_button)
            print(' push button = else ')
            if txt_button == "stop":
                self.timer_on_of = False


    def default_push_button(self, push_button):
        if push_button == "start_ten_min" and self.label_remind.text() == "Remind me in:":
            self.label_remind.setText(" 10 минут и старт")  # Передать текст в главное окно
        elif push_button == "plus_min" and self.label_remind.text() == "Remind me in:":
            self.label_remind.setText(" 11 минут")
        elif push_button == "minus_min" and self.label_remind.text() == "Remind me in:":
            self.label_remind.setText(" 9 минут")
        elif push_button == "plus_ten_min" and self.label_remind.text() == "Remind me in:":
            self.label_remind.setText(" 20 минут")
        elif push_button == "minus_ten_min" and self.label_remind.text() == "Remind me in:":
            self.label_remind.setText("Remind me in:")
        elif push_button == "stop":
            self.label_remind.setText("Remind me in:")
            print('установить таймер на умолчание')
            self.timer_on_of = False
            print('def_push_button', self.timer_on_of)
        else:
            self.label_remind.setText("Ошибка: Функция не определена!")


    #*****************************************************#

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Cutlet Alarm"))
        self.label_remind.setText(_translate("MainWindow", "Remind me in:"))
        self.btn_start.setText(_translate("MainWindow", "10:00"))
        self.btn_plus.setText(_translate("MainWindow", "+1 min"))
        self.btn_minus.setText(_translate("MainWindow", "-1 min"))
        self.btn_stop.setText(_translate("MainWindow", "STOP"))
        self.btn_plus_ten.setText(_translate("MainWindow", "+10 min"))
        self.btn_minus_ten.setText(_translate("MainWindow", "-10 min"))



